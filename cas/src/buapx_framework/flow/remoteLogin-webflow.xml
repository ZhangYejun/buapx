<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/webflow
                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

	<on-start>
		<evaluate expression="initialFlowSetupAction" />
		<evaluate expression="remoteCredentialResolveAction" />
		<set name="flowScope.action" value="requestParameters.action" />
		<set name="flowScope.remoteLoginPage" value="requestParameters.remoteLoginPage" />


	</on-start>


   <decision-state id="submitDecision">
		<if test="flowScope.action eq 'submit' " then="captchaValidate" else="ticketGrantingTicketExistsCheck" />
	</decision-state>

<!-- <action-state id="decodeService">
 <evaluate expression="serviceCoder.decodeService(flowRequestContext)" />
 <transition to="realSubmit" />
</action-state> -->

<action-state id="captchaValidate">
<evaluate expression="captchaValidateAction"/>
	<transition on="success" to="realSubmit" />
	<transition on="error"  to="remoteLoginView" />
</action-state>

	<decision-state id="ticketGrantingTicketExistsCheck">
		<if test="flowScope.ticketGrantingTicketId neq null" then="hasServiceCheck"
			else="remoteLoginView" />
	</decision-state>


	<!-- <action-state id="illegalUserCheck"> <evaluate expression="illegalUserCheckAction"
		/> <transition on="true" to="illegalUserErrorView" /> <transition on="false"
		to="hasServiceCheck" /> </action-state> -->

	<decision-state id="hasServiceCheck">
		<if test="flowScope.service != null " then="generateServiceTicket" />
		<if then="viewGenericLoginSuccess" test="true eq true" /><!-- For default
			login view -->
	</decision-state>


	<!-- The "warn" action makes the determination of whether to redirect directly
		to the requested service or display the "confirmation" page to go back to
		the server. -->
	<decision-state id="warn">
		<if test="flowScope.warnCookieValue" then="showWarningView" else="redirect" />
	</decision-state>




	<action-state id="realSubmit">
		<evaluate
			expression="authenticationViaFormAction.submit(flowRequestContext, flowScope.credentials, messageContext)" />
		<transition on="warn" to="warn" />
		<transition on="success" to="sendTicketGrantingTicket" />
		<transition on="error" to="remoteLoginView" />
		<!-- <transition on="error" to="errorCount" /> -->
	</action-state>




	<action-state id="sendTicketGrantingTicket">
		<evaluate expression="sendTicketGrantingTicketAction" />
		   <transition to="serviceCheck" />
		  <!--  <transition to="pwdExpireCheck" />  如果需要密码过期检查，将serviceCheck改为pwdExpireCheck  -->
	</action-state>


<!--  暂时不需要 密码过期检查 
	<action-state id="pwdExpireCheck">
		<evaluate expression="pwdExpireCheckAction" />
		<transition on="true" to="passwordExpiryView" />
		<transition on="false" to="serviceCheck" />
	</action-state>
 -->


	<decision-state id="serviceCheck">
		<if test="flowScope.service neq null" then="generateServiceTicket" />
		<if then="viewGenericLoginSuccess"
			test="flowScope.loginType eq null or flowScope.loginType eq '' or flowScope.loginType eq 'default' " />
		<if then="viewGenericLoginSuccess" test="true eq true" /><!-- For default
			login success view -->
	</decision-state>

	<action-state id="generateServiceTicket">
		<evaluate expression="generateServiceTicketAction" />
		<transition on="success" to="warn" />
		<transition on="error" to="remoteLoginView" />
		<transition on="active" to="activeView" />
	</action-state>



	<action-state id="redirect">
		<evaluate
			expression="flowScope.service.getResponse(requestScope.serviceTicketId)"
			result-type="org.jasig.cas.authentication.principal.Response" result="requestScope.response" />
		<transition to="postRedirectDecision" />
	</action-state>


	<decision-state id="postRedirectDecision">
		<if test="requestScope.response.responseType.name() eq 'POST'"
			then="postView" else="redirectView" />
	</decision-state>


	<end-state id="viewGenericLoginSuccess" view="casLoginGenericSuccessView" />




	<end-state id="postView" view="postResponseView">
		<on-entry>
			<set name="requestScope.parameters" value="requestScope.response.attributes" />
			<set name="requestScope.originalUrl" value="flowScope.service.id" />
		</on-entry>
	</end-state>


	<end-state id="redirectView" view="externalRedirect:${requestScope.response.url}" />

	<!-- <end-state id="illegalUserErrorView" view="externalRedirect:${flowScope.illegalUserErrorPage}"
		/> -->


	<end-state id="remoteLoginView" view="externalRedirect:${flowScope.remoteLoginPage}">
		<on-entry>
			<evaluate
				expression="remoteLoginPageResolveAction.decodeThenAppendService(flowRequestContext,flowScope.remoteLoginPage,flowScope.service)" />
		    <evaluate
				expression="remoteLoginPageResolveAction.appendErrorCode(flowRequestContext,flowScope.remoteLoginPage)" />
			 <evaluate
				expression="remoteLoginPageResolveAction.appendLoginFlag(flowRequestContext,flowScope.remoteLoginPage)" />
		</on-entry>
	</end-state>

	<end-state id="activeView" view="externalRedirect:${flowScope.activePage}" />

	<end-state id="passwordExpiryView" view="externalRedirect:${flowScope.pwdExpiryPage}" />

	<end-state id="viewServiceErrorView" view="viewServiceErrorView" />

	<end-state id="viewServiceSsoErrorView" view="viewServiceSsoErrorView" />

	<end-state id="commonRedirectView" view="externalRedirect:${flowScope.redirectUrl}" />


	<global-transitions>
		<transition to="viewServiceErrorView"
			on-exception="org.springframework.webflow.execution.repository.NoSuchFlowExecutionException" />
		<transition to="viewServiceSsoErrorView"
			on-exception="org.jasig.cas.services.UnauthorizedSsoServiceException" />
		<transition to="viewServiceErrorView"
			on-exception="org.jasig.cas.services.UnauthorizedServiceException" />
	</global-transitions>
</flow>
